name: Deploy to GCP VPS

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          cat > ~/.ssh/deploy_key << 'EOF'
          ${{ secrets.VPS_SSH_KEY }}
          EOF
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Create app directory if it doesn't exist
            mkdir -p /home/kksimons/class-scheduler
            cd /home/kksimons/class-scheduler

            # Clone or update repository
            if [ -d ".git" ]; then
              git pull origin main || git pull origin master
            else
              git clone https://github.com/kksimons/class-scheduler.git .
            fi

            # Install Python dependencies with --break-system-packages
            python3 -m pip install --user --break-system-packages -r app/requirements.txt
            
            # Ensure all dependencies are properly installed
            echo "Verifying critical dependencies..."
            python3 -c "import libsql_client; print('✅ libsql_client installed')" || echo "❌ libsql_client missing"
            python3 -c "import fastapi; print('✅ fastapi installed')" || echo "❌ fastapi missing"
            
            # Create/update .env file with secrets
            cat > app/.env << 'ENVEOF'
          TURSO_DATABASE_URL=${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN=${{ secrets.TURSO_AUTH_TOKEN }}
          API_SECRET_KEY=${{ secrets.API_SECRET_KEY }}
          ENVEOF

                      # Update systemd service configuration
                      sudo tee /etc/systemd/system/class-scheduler.service > /dev/null << 'SERVICEEOF'
          [Unit]
          Description=Class Scheduler FastAPI Application
          After=network.target

          [Service]
          Type=simple
          User=kksimons
          WorkingDirectory=/home/kksimons/class-scheduler
          Environment=PATH=/home/kksimons/.local/bin:/usr/local/bin:/usr/bin:/bin
          ExecStart=/home/kksimons/.local/bin/uvicorn app.app:app --host 0.0.0.0 --port 8502
          Restart=always
          RestartSec=3

          [Install]
          WantedBy=multi-user.target
          SERVICEEOF

            # Reload systemd and enable service
            sudo systemctl daemon-reload
            sudo systemctl enable class-scheduler.service

            # Kill any existing process and restart manually if sudo fails
            if ! sudo systemctl restart class-scheduler.service 2>/dev/null; then
              echo "Sudo restart failed, trying manual process management..."
              pkill -f "uvicorn.*app:app" || true
              sleep 2
              cd /home/kksimons/class-scheduler
              # Export environment variables from .env file before starting
              export $(cat app/.env | grep -v '^#' | xargs)
              nohup python3 -m uvicorn app.app:app --host 0.0.0.0 --port 8502 > /dev/null 2>&1 &
              sleep 3
            fi

            # Check if it's running (try both systemd and manual process)
            if sudo systemctl is-active --quiet class-scheduler.service 2>/dev/null || pgrep -f "uvicorn.*app:app" > /dev/null; then
              echo "FastAPI app is running successfully"
              if sudo systemctl status class-scheduler.service --no-pager 2>/dev/null; then
                echo "Running via systemd"
              else
                echo "Running as manual process:"
                pgrep -f "uvicorn.*app:app" && echo "Process found"
              fi
              echo ""
              echo "Memory status after deployment:"
              free -h
              echo ""
              echo "Swap status:"
              sudo swapon --show || echo "No swap configured"
            else
              echo "Failed to start FastAPI app"
              if sudo journalctl -u class-scheduler.service --no-pager -n 10 2>/dev/null; then
                echo "Systemd logs shown above"
              else
                echo "Could not access systemd logs, checking for any running processes..."
                ps aux | grep -E "(uvicorn|fastapi)" | grep -v grep || echo "No related processes found"
              fi
              echo ""
              echo "Memory status:"
              free -h
              exit 1
            fi
          EOF
